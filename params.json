{"name":"Tool4j","tagline":"","body":"## tool4j\r\ntool4j is an easy to use annotation based mini framework that helps to write command line tools.\r\n\r\n\r\n### Usage\r\n\r\n```java\r\n@Tool(name = \"testTool\", value ={@Option(\"name\"), @Option(\"card\")})\r\npublic class TestTool {\r\n\r\n    AtomicInteger totalProcessed = new AtomicInteger();\r\n\r\n    public static void main(String[] args) throws ParseException, IllegalAccessException, InvocationTargetException {\r\n        ToolRunner tool = new ToolRunner();\r\n        tool.run(new TestTool(), new String[]{\"--name\", \"name\", \"--card\", \"2123 1242 1241 1241\"});\r\n    }\r\n\r\n    @Data\r\n    public Collection<Integer> init(@Value(\"name\") String name,\r\n                                    @Value(\"card\") String card) {\r\n        System.out.println(name);\r\n        System.out.println(card);\r\n        return Arrays.asList(1, 2, 3, 4);\r\n    }\r\n\r\n    @Execution\r\n    public void run(@Value(\"name\") String name, @Data Collection<Integer> data) {\r\n      //our task\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Annotations\r\n- @Tool: use on top of the main class\r\n- @Option: use to specify which command line argument your tool can accept\r\n- @Data: use for a method which generates initial data for a tool\r\n- @Execution: use to mark the actuall execution method\r\n- @Progress (optional): use to return current progress\r\n- @Value: use to inject command line arguments into the methods\r\n\r\nContributions are welcome\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}